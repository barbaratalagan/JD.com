---
title: "Regression Price Model"
author: "Barbara Talagan"
format: html
editor: visual
---

# Packages

```{r}
library(readxl)
library(openxlsx)
library(tidyverse)
library(tidyr)
library(dplyr)
library(lubridate)
```

# Importing Data

```{r}
excel_file <- "JD_March_2018_data.xlsx"

user_data <- read_excel(excel_file, sheet = "User")
sku_data <- read_excel(excel_file, sheet = "SKU")
order_data <- read_excel(excel_file, sheet = "Order")
inventory_data <- read_excel(excel_file, sheet = "Inventory")
delivery_data <- read_excel(excel_file, sheet = "Delivery")
network_data <- read_excel(excel_file, sheet = "Network")
```

# By Product

```{r}
regression_data <- order_data %>%
  filter(type == 1) %>%
  mutate(discount = (1-final_unit_price/original_unit_price)) %>%
  group_by(order_date, sku_ID) %>%
  summarize(quantity_sold = sum(quantity),
            avg_original_unit_price = mean(original_unit_price),
            avg_final_unit_price = mean(final_unit_price),
            avg_discount = mean(discount)) %>%
  group_by(sku_ID) %>%
  summarize(daily_avg_q_sold = mean(quantity_sold),
            daily_avg_original_unit_price = mean(avg_original_unit_price),
            daily_avg_final_unit_price = mean(avg_final_unit_price),
            daily_avg_discount = mean(avg_discount)) %>%
  filter(daily_avg_original_unit_price > 0) %>%
  mutate(log_quantity_sold = log(daily_avg_q_sold),
         log_avg_original_unit_price = log(daily_avg_original_unit_price),
         log_avg_final_unit_price = log(daily_avg_final_unit_price),
         log_avg_total_discount = log(daily_avg_discount)) %>%
  filter(!is.infinite(log_avg_total_discount))
```

```{r}
names(regression_data)
#write.xlsx(regression_data, "price_optimization_daily2.xlsx")
```
```{r}
model <- lm(log_quantity_sold ~ log_avg_original_unit_price + log_avg_total_discount, data = regression_data)
summary(model)
```

Tried to automate price optimization in R-Studio but cannot. See price opimization excel file. 

```{r}
m = 0.728824   
b1 = -0.034198
b2 = 0.082621
```

```{r}
# Adding the new column to the dataframe
demand_forecast <- regression_data2 %>%
  mutate(b2_log = 1 - log_avg_original_unit_price / log_avg_final_unit_price,
         m = 0.728824,
         b1 = -0.034198,
         b2 = 0.082621,
         m2 = 1,
         estimated_revenue = exp(rowSums(across(c(m, b1, b2)) * across(c(m, log_avg_original_unit_price, b2_log)))))

# Replace 'estimated_revenue' with the desired name for the new column.

```

# By warehouse 
Very Low R-Square (.02) Price optimization does not work with this data due to low sample of products and warehouses.

```{r}
regression_data2 <- order_data %>%
  filter(type == 1) %>%
  mutate(discount = (1-final_unit_price/original_unit_price)) %>%
  group_by(order_date, dc_des, sku_ID  ) %>%
  summarize(quantity_sold = sum(quantity),
            avg_original_unit_price = mean(original_unit_price),
            avg_final_unit_price = mean(final_unit_price),
            avg_discount = mean(discount)) %>%
  group_by(dc_des, sku_ID) %>%
  summarize(daily_avg_q_sold = mean(quantity_sold),
            daily_avg_original_unit_price = mean(avg_original_unit_price),
            daily_avg_final_unit_price = mean(avg_final_unit_price),
            daily_avg_discount = mean(avg_discount)) %>%
  filter(daily_avg_original_unit_price > 0) %>%
  mutate(log_quantity_sold = log(daily_avg_q_sold),
         log_avg_original_unit_price = log(daily_avg_original_unit_price),
         log_avg_final_unit_price = log(daily_avg_final_unit_price),
         log_avg_total_discount = log(daily_avg_discount)) %>%
  filter(!is.infinite(log_avg_total_discount))
```

```{r}
model_2 <- lm(log_quantity_sold ~ log_avg_original_unit_price + log_avg_total_discount, data = regression_data2)
summary(model_2) 
```
