---
title: "capactiy_planning_edits"
author: "Barbara Talagan"
format: html
editor: visual
---

# Info

This code reflects the suggestions from Professor Guar's email 

Things to think about:

(i) what is the total order up to level at each warehouse and for each product category; 

(ii) how does this compare with their previous levels of inventory

# Packages
```{r}
library(readxl)
library(openxlsx)
library(tidyverse)
library(tidyr)
library(dplyr)
library(lubridate)
```


# Importing Data
```{r}
excel_file <- "JD_March_2018_data.xlsx"

user_data <- read_excel(excel_file, sheet = "User")
sku_data <- read_excel(excel_file, sheet = "SKU")
order_data <- read_excel(excel_file, sheet = "Order")
inventory_data <- read_excel(excel_file, sheet = "Inventory")
delivery_data <- read_excel(excel_file, sheet = "Delivery")
network_data <- read_excel(excel_file, sheet = "Network")
```

# Merging 
```{r}
order_delivery <- left_join(order_data, delivery_data, by = "order_ID")

# Have to filter out 3P products because JD.com does not have control over them
order_delivery <- order_delivery %>%
  filter(type.x == 1) 
```

# Capacity Planning

No inflows needed with this example

## Mean and StDev Outflow

```{r}
# To find daily mean day 1 + day 2 + day 3 ... day 31 / 31

mean_std_outflow_day <- order_delivery %>%
  # Finding the total daily demand by warehouse and product
  group_by(order_date, dc_des, sku_ID) %>%
  summarize(sum_order_quantity = sum(quantity),
            avg_price = mean(original_unit_price)) %>%
  group_by(dc_des, sku_ID) %>%
  # Finding the average daily demand by warehouse and product
  summarize(demand_mean = mean(sum_order_quantity),
            stdev_mean = sd(sum_order_quantity),
            avg_price = mean(avg_price)) %>%
  rename(warehouse = dc_des)
```

## Optimizing Inventory

```{r}
# Change to your desired lead time
desired_lead_time = 7 #days

capacity_data <- mean_std_outflow_day %>%
        # Adding more scaling variables
  mutate(service_rate = 0.95,
         z_score = qnorm(service_rate),
         safety_stock = (demand_mean + stdev_mean * z_score),
         # Performance metrics
         probability_stockout = (1- service_rate),
         stand_loss_function = (-z_score*(1-pnorm(z_score)) + dnorm(z_score, 0, 1)),
         exp_lost_sales = (stdev_mean * stand_loss_function),
         exp_sales = (demand_mean - exp_lost_sales),
         exp_excess_inventory = (safety_stock - exp_sales),
         # Lead time metrics
         lead_time = desired_lead_time,
         stdev_lead_time = 0,
         mean_lead_time_demand = (demand_mean * lead_time),
         stdev_lead_time_demand = 0,
         order_up_to_level = (mean_lead_time_demand + z_score * stdev_lead_time_demand),
         # Cost Optimization
         profit_margin = .13,
         cost = (avg_price / (1 + profit_margin)),
         holding_cost = (cost * .30),
         goodwill_cost = (cost * .50),
         cost_of_excess_inventory = (holding_cost * exp_excess_inventory),
         cost_of_lost_sales = (goodwill_cost * exp_lost_sales),
         total_cost = cost_of_excess_inventory + cost_of_lost_sales)
```

```{r}
write.xlsx(capacity_data, "revised_results.xlsx")
```


## Finding top 5 products and top 5 warehouses

```{r}
# Top 5 largest products by total exp_sales
top_5_products <- capacity_data %>%
  group_by(sku_ID, warehouse) %>%
  summarize(total_inflow_mean_demand = sum(demand_mean),
            total_exp_sales = sum(exp_sales),
            total_safety_stock = sum(safety_stock),
            total_order_up_to_level = sum(order_up_to_level)) %>%
  arrange(desc(total_exp_sales)) %>%
  head(5)
top_5_products
#write.xlsx(top_5_products, "top5_products.xlsx")
```
